-- Complete Database Cleanup Script for Spicebox
-- This script will delete all data and optionally drop tables
-- Run this in Supabase SQL Editor

-- =====================================================
-- STEP 1: DELETE ALL DATA (Safe - keeps table structure)
-- =====================================================

-- Delete all readings first (due to foreign key constraint)
DELETE FROM public.readings;
-- Expected output: DELETE X (number of readings deleted)

-- Delete all devices
DELETE FROM public.devices;
-- Expected output: DELETE Y (number of devices deleted)

-- =====================================================
-- STEP 2: OPTIONAL - DROP TABLES (Destructive)
-- =====================================================

-- WARNING: These commands will permanently delete the tables
-- Uncomment only if you want to completely remove the tables

-- Drop readings table (must be dropped first due to foreign key)
-- DROP TABLE IF EXISTS public.readings CASCADE;

-- Drop devices table
-- DROP TABLE IF EXISTS public.devices CASCADE;

-- =====================================================
-- STEP 3: OPTIONAL - DROP STORAGE BUCKET
-- =====================================================

-- WARNING: This will delete all uploaded images
-- Uncomment only if you want to remove the storage bucket

-- SELECT storage.delete_bucket('device-images');

-- =====================================================
-- VERIFICATION QUERIES
-- =====================================================

-- Check if tables are empty
SELECT COUNT(*) as devices_count FROM public.devices;
SELECT COUNT(*) as readings_count FROM public.readings;

-- List all storage files (if bucket still exists)
-- SELECT * FROM storage.objects WHERE bucket_id = 'device-images';

-- =====================================================
-- RESTORATION SCRIPT (if you need to recreate)
-- =====================================================

/*
-- If you accidentally dropped the tables, recreate them:

-- Devices table
CREATE TABLE IF NOT EXISTS public.devices (
  deviceid TEXT PRIMARY KEY,
  container_name TEXT,
  min_quantity_g NUMERIC DEFAULT 10,
  max_capacity_g NUMERIC DEFAULT 500,
  image_url TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Readings table
CREATE TABLE IF NOT EXISTS public.readings (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  deviceid TEXT NOT NULL REFERENCES public.devices(deviceid) ON DELETE CASCADE,
  weight_g NUMERIC NOT NULL,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_devices_created_at ON public.devices (created_at DESC);
CREATE INDEX IF NOT EXISTS idx_readings_deviceid_created_at ON public.readings (deviceid, created_at DESC);

-- Row Level Security
ALTER TABLE public.devices ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.readings ENABLE ROW LEVEL SECURITY;

-- Policies
CREATE POLICY "anon insert readings" ON public.readings FOR INSERT TO anon WITH CHECK (true);
CREATE POLICY "anon select devices" ON public.devices FOR SELECT TO anon USING (true);
CREATE POLICY "anon upsert devices" ON public.devices FOR INSERT TO anon WITH CHECK (true);
CREATE POLICY "anon update devices" ON public.devices FOR UPDATE TO anon USING (true) WITH CHECK (true);

-- Storage bucket
-- INSERT INTO storage.buckets (id, name, public) VALUES ('device-images', 'device-images', true);
-- CREATE POLICY "Allow anon upload" ON storage.objects FOR INSERT TO anon WITH CHECK (bucket_id = 'device-images');
-- CREATE POLICY "Allow anon read" ON storage.objects FOR SELECT TO anon USING (bucket_id = 'device-images');
-- CREATE POLICY "Allow anon update" ON storage.objects FOR UPDATE TO anon USING (bucket_id = 'device-images');
-- CREATE POLICY "Allow anon delete" ON storage.objects FOR DELETE TO anon USING (bucket_id = 'device-images');
*/