-- Supabase schema setup for devices and readings (run in SQL editor)

-- Devices metadata table: one row per device
create table if not exists public.devices (
  deviceid text primary key,
  container_name text,
  min_quantity_g numeric default 10,
  max_capacity_g numeric default 500,
  image_url text,
  created_at timestamptz not null default now()
);

-- Helpful index for listing by newest
create index if not exists idx_devices_created_at on public.devices (created_at desc);

-- Ensure readings table exists (you already created a compatible version)
create table if not exists public.readings (
  id bigint generated by default as identity primary key,
  deviceid text not null references public.devices(deviceid) on delete cascade,
  weight_g numeric not null,
  created_at timestamptz not null default now()
);

create index if not exists idx_readings_deviceid_created_at
  on public.readings (deviceid, created_at desc);

-- Enable Row Level Security
alter table public.devices enable row level security;
alter table public.readings enable row level security;

-- Policies (prototype): allow anon to insert readings and read devices
do $$
begin
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='readings' and policyname='anon insert readings'
  ) then
    create policy "anon insert readings"
      on public.readings for insert to anon with check (true);
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='devices' and policyname='anon select devices'
  ) then
    create policy "anon select devices"
      on public.devices for select to anon using (true);
  end if;
  if not exists (
    select 1 from pg_policies where schemaname='public' and tablename='devices' and policyname='anon upsert devices'
  ) then
    create policy "anon upsert devices"
      on public.devices for insert to anon with check (true);
    create policy "anon update devices"
      on public.devices for update to anon using (true) with check (true);
  end if;
end$$;

-- Storage: create a bucket for device images
-- Note: Run this in Supabase Dashboard → Storage → Create Bucket instead
-- Or use: select storage.create_bucket('device-images', public => true);

-- Storage policies for device-images bucket (run after creating the bucket)
-- Allow anon users to upload, read, update and delete images
CREATE POLICY "Allow anon upload" ON storage.objects FOR INSERT TO anon WITH CHECK (bucket_id = 'device-images');
CREATE POLICY "Allow anon read" ON storage.objects FOR SELECT TO anon USING (bucket_id = 'device-images');
CREATE POLICY "Allow anon update" ON storage.objects FOR UPDATE TO anon USING (bucket_id = 'device-images');
CREATE POLICY "Allow anon delete" ON storage.objects FOR DELETE TO anon USING (bucket_id = 'device-images');

-- Realtime (Dashboard): enable INSERT events for table public.readings if clients should live-update.
-- Go to Dashboard → Realtime → Tables → Enable public.readings for INSERT events


